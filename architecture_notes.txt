Application Intent
- News aggregator
- chat interface

Guiding Principles
- Admin interface that lets users securely provide/maintain api keys w/ workflows to support manual rotations for now, integrated rotations in the future
- 

key compoients
- news aggregator
- configurable card models for the news browser

---

2025-06-08
Intent: Refactor frontend for ag-Grid news cards, card pinning/updating, debug toggle, and improved sidebar UX.
Summary:
- Integrated ag-Grid for news results in stacked cards (sortable, filterable, groupable).
- Added ability to pin, update, and remove cards.
- Sidebar: debug toggle, smaller font, card action controls (create/update with dropdown), removed company icon/reference.
- Debugging is on by default in dev, toggle in sidebar.
Files changed: frontend/app.js, frontend/package.json, frontend/index.html, README.md

2025-06-08
Intent: Fix NewsAPI 500 error on default load when no query is provided.
Summary:
- Updated proxy/server.js to fallback to /v2/top-headlines with country=us if no query is provided, preventing 500 errors.
- Ensured only NewsAPI-supported params are sent to the API.
Files changed: proxy/server.js

2025-06-08
Intent: Improve ag-Grid reliability, error handling, and developer workflow.
Summary:
- Switched all ag-Grid CSS/JS to CDN links only; removed local node_modules references.
- Moved ag-Grid CDN script to end of <body> in index.html to guarantee load order.
- Added waitForAgGrid in app.js to delay app initialization until ag-Grid is available, with clear error if not.
- Improved Grok response parsing and debug logging in app.js.
- Added pro forma Playwright/Puppeteer-style UI test (agGridLoad.test.js) for ag-Grid and chat/news card flow.
- Updated documentation and troubleshooting guidance in README.
Files changed: frontend/index.html, frontend/app.js, frontend/agGridLoad.test.js, README.md

2025-01-07
Intent: Fix Docker credential issues and ag-Grid loading problems to unblock development.
Summary:
- Fixed Docker credential helper issues by simplifying ~/.docker/config.json (removed "credsStore": "desktop").
- Resolved ag-Grid loading problems by switching from unreliable CDN to local npm package installation.
- Updated index.html to load ag-Grid from local node_modules with proper script order (ag-Grid before app.js).
- Enhanced app.js with robust ag-Grid detection supporting both modern (createGrid) and legacy (Grid) APIs.
- Removed obsolete version declaration from docker-compose.yml to eliminate warnings.
- Improved rebuild_stack.sh with simplified Docker handling and removed CDN dependency checks.
- All 4/4 Playwright tests now pass reliably.
- Comprehensive README.md overhaul with current architecture, troubleshooting, and development workflow.
Files changed: proxy/rebuild_stack.sh, docker-compose.yml, frontend/index.html, frontend/app.js, README.md, ~/.docker/config.json

Key Fixes Applied:
1. **Docker Issues**: Simplified credential handling, removed desktop credential store dependency
2. **ag-Grid Reliability**: Local npm package installation instead of CDN, improved API detection
3. **Build Process**: Enhanced rebuild script with better error handling and Docker Compose detection
4. **Documentation**: Updated with current state, troubleshooting guides, and architecture diagrams
5. **Testing**: All integration tests now pass consistently

# Architecture Notes (June 2025)

## Current Architecture
- **Grid Solution:** Tabulator is the canonical data grid for all news table rendering. ag-Grid is fully removed. (Project migration, June 2025)
- **Date Formatting:** Tabulator uses Luxon library for date formatting. Custom `luxonDatetime` formatter with fallbacks provides reliable date display. (Update, June 11, 2025)
- **Entry Point:** `app.js` is the only supported frontend entry point. `app_enhanced.js` is archived for historical reference. (Project migration, June 2025)
- **Modularization:** Main app logic is split into `app.js`, `state.js`, `ui.js`, `api.js`, and `utils.js` for maintainability. (Project refactor, June 2025)
- **Testing:** Playwright tests target Tabulator and chat/news card flow (`tabulator.test.js`). (Testing update, June 2025)
- **Proxy/Backend:**
  - `/grok` endpoint receives a user prompt, sends it to xAI Grok, parses the structured JSON response, and fetches news from NewsAPI using the generated query. The response to the frontend includes the explanation, the query, and the news results. (Backend update, June 2025)
  - `/news` endpoint provides direct NewsAPI access for custom queries. (Backend update, June 2025)
  - All legacy ag-Grid and obsolete files have been removed for a clean, modern codebase. (Cleanup, June 2025)

## Ongoing & Long-Term Guiding Principles
- **Accessibility:** All UI components must be accessible (keyboard navigation, ARIA, high contrast). Run Lighthouse/axe audits regularly. (W3C/WCAG, Project Plan, June 2025)
- **Design System:** Use DaisyUI/Flowbite for rapid, consistent UI development. Maintain a Figma file and Storybook for design-dev collaboration. (Project Plan, June 2025)
- **Theming & Whitelabel:** Support light/dark mode (Tailwind `dark:`), and prepare for whitelabeling with CSS variables for colors/logos. (Project Plan, June 2025)
- **Error Handling & Analytics:** Surface backend errors in the UI (SweetAlert2/DaisyUI alerts). Use Sentry for error logging and Google Analytics for user tracking. (Project Plan, June 2025)
- **Testing & Quality:** Expand automated testing (Jest/Supertest for API, Playwright for UI, contract tests with Pact). Enforce pre-commit/CI checks for secrets, linting, and tests. (Project Plan, June 2025)
- **Performance:** For large datasets, use server-side pagination/infinite scroll. Monitor frontend performance with Web Vitals. (Project Plan, June 2025)
- **Security:** Use a secrets manager (e.g., Doppler) for production. Add rate limiting (express-rate-limit) and input validation (Joi) to backend. (Project Plan, June 2025)
- **Documentation & Community:** Keep all docs up to date. Draft and maintain `CONTRIBUTING.md` for open source contributions. (Project Plan, June 2025)
- **User Feedback Loop:** After major design changes, conduct user testing and iterate based on feedback. (Project Plan, June 2025)
- **API Versioning:** As new features are added, consider versioning backend APIs for future-proofing. (Project Plan, June 2025)

---
*Sources: Project migration and planning notes (June 2025), W3C/WCAG guidelines, DaisyUI/Flowbite docs, Sentry, Google Analytics, Lighthouse, axe, Web Vitals, Doppler, express-rate-limit, Joi, Playwright, Jest, Pact, Figma, Storybook, and user/agent feedback.*
